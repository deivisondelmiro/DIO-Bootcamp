    - Métodos para lidar com Arrays

    - Map:
        Cria um novo array
        Não modifica o array original
        Realiza as operações em ordem

    - Sintaxe
        array.map(callback, thisArg)
            callback: função a ser executada em cada elemento (callback(item, index, array))
            thisArg (opcional): valor de 'this' dentro da função de callback

    - Map vs forEach
        - Valor de retorno.

        - Usando map
            const array = [1, 2, 3, 4, 5];
            array.map((item) => item * 2); // retorno: [2, 4, 6, 8, 10];

        - Usando forEach
            const array = [1, 2, 3, 4, 5];
            array.forEach((item) => item * 2); // retorno: undefined;

    - Filter: como se colocasse um array dentro de um filtro, e dependendo da condição, é retornado outro array com os /valoresdados filtrados
        Cria um novo array.
        Não modifica o array original

        Sintaxe:
            array.filter(callback, thisArg)

    - Reduce: executa uma função em todos os elementos do array, retornando um valor único

        Sintaxe:
            array.reduce(callbackFn, initialValue)
                callback: função a ser executada a partir do acumulador
                initialValue: valor sobre o qual o retorno final irá atuar

            const callbackFn = funtion(accumlator, currentValue, index, array) {
                // do something
            }

            array.reduce(callbackFn, initialValue)
                Accumulator/prevValue: acumulador de todas as chamadas de callbackFn
                currentValue: lemento atual sendo acessado pela função