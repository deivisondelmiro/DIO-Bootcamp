    - Estrutura de uma função

    function nome(parametros) {
        instruções
    }

    Função irá determinar alguma ação/instrução para ser realizada

    Variáveis criadas dentro de uma função apenas podem ser utilizadas dentro dela.

    Quando invocamos o "return", a função para de ser executada. E retorna o valor após a execução dela

    - Função Anônima
        Funções que respresentam expressões.
            Uma variável pode armazenar uma função.

    - Função Autoinvocável
        Função que não precisará ser chamada, pois se auto chama.
        IIFE(Immediately Invoked Function Expression)
        Uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada.

        (
            funtion() {
                let name = "Digital Innovation One"
                return name;
            }
        )();

        Pode utilizar parâmetros ou armazenada em uma variável

    - Callbacks: Uma função passada como argumento para outra.
        Utilizando callbacks, você tem maior controle da ordem de chamadas.

    - Valores padrão e Objeto "arguments"

    - Valores padrão: valores que quando não digitadas,terá um valor cpadrão no lugar

    - Objeto "arguments"
        Um array com todos os parâmetros passados quando a função foi invocada.

    - Arrays
        - Spread: uma forma de lidar separadamente com elemntos.
            O que era parte de um array se torna um elemento independente.

        - Rest: combina os argumentos em um array.
            O que era um elemento independente se torna parte de um array.

    - Objetos
        - Object Destructuring
            Entre chaves {}, podemos filtrar apenas os dados que nos interessam em um objeto.

    - Loops
        - If/else
            Condição
            Declaração 1 (dentro de if): Ocorre caso a condição seja verdadeira
            Declaração 2 (dentro de else): Ocorre caso a condição seja falsa

            Javascript não tem elseif, as palavras sempre estão espaçadas!

        - Switch/case
            Equivale a uma comparação de tipo e valor (===)
            Sempre precisa de um valor "default"
            Ideal para quando se precisa comparar muitos valores

        - For: loop dentro de elementos interáveis (arrays, strings).

        - For ... in: loop entre propriedades enumeráveis de um objeto.

        - For ... of: loop entre estruturas interáveis (arrays, strings).

        - While: executa instruções até que a condição se torne falsa.

        - Do ... while: executa instruções até que a condição se torne falsa.
            Porém a primeira execução sempre ocorre.

        - This: uma palavra reservada que faz referência a um contexto.
            Valores: muda de acordo com o lugar no código onde foi chamada.
                Em um objeto (método): Próprio objeto dono do método
                Sozinha: Objeto global (em navegadores, window)
                Função: Objeto global
                Evento: Elemento que recebeu o evento

            - Manipulando seu valores
                - Call: serve para passar por meios de parâmetros, outos valores. Na call, os parâmetros podem ser passados separando-os por vírgulas.
                - Apply: semelhante ao call, mas passa os parâmetros por meio de array.
                Bind: Clona a estrutura da função onde é chamada e aplica o valor do objeto passado como parâmetro.

        - Arrow functions: Representado por "=>", e serve para diminuir o que seria um função. E caso, a função seja pequena e somente um linha, não há a necessidade de ter o return e chaves "{}".
            Caso exista apenas um parâmetro, pode dispensar os parênteses.
            Não faz hosting.

            - Outras restrições:
                "this" sempre será o objeto global. Métodos para modificar seu valor não irão funcionar;
                Naõ existe o objeto "arguments";
                O construtor (ex: new MeuObjeto()) também não pode ser utilizado.